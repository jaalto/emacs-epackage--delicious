\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename delicious-el.info
@settitle delicious-el v0.2
@c %**end of header

@dircategory Emacs
@direntry
* delicious-el: (delicious-el). delicious.el: Emacs client for del.icio.us
@end direntry

@copying
This manual is for delicious-el, version 0.2.

Copyright @copyright{} 2004, 2005 John Sullivan.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License, Version 2.0
or any later version published by the Free Software Foundation.
A copy of the license is included in the section entitled ``GNU
General Public License.''
@end quotation
@end copying

@titlepage
@title Using delicious-el
@author John Sullivan

@c  The following two commands
@c  start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c So the toc is printed at the start.
@contents

@ifnottex
@node Top
@top delicious-el

@insertcopying
@end ifnottex

@menu
* Introduction::
* Installation::        Downloading and installing the libraries
* Getting Started::
@end menu

@node Introduction
@chapter Introduction

This is a complete set of functions for interacting with
@url{http://del.icio.us}, a ``social bookmarking'' project written and
maintained by Joshua Shachter.

The del.icio.us API does go through frequent changes; I've made an effort here
to structure the code so that these changes can be easily accommodated.

The specifications for the API are at <http://del.icio.us/doc/api>.

@node Installation
@chapter Installation
@cindex installation

After downloading and unpacking the archive or getting the darcs
repository, you should have the following files:

@itemize
@item @file{delicioapi.el}
@item @file{delicious.el}
@item @file{planner-delicious.el}
@item @file{ChangeLog}
@item @file{ChangeLog.OLD}
@item @file{README}
@item @file{COPYING}
@item @file{delicious-el.texi}
@item @file{delicious-el.info}
@end itemize

In order to use delicious-el, you will also need the following files,
which most likely came with your Emacs distribution, but which you will
need to locate and install if not.

@itemize
@item @file{url.el}
@end itemize


@file{delicioapi.el} contains the back-end functions that interact with
the API, behind the scenes. I have kept these in a separate file to make
them available for others to use in writing their own delicious
applications, without being required to load the commands that I have
written.

@file{delicious.el} contains the front-end interactive functions and commands for
putting the API functions to productive use, via Emacs. 'delicioapi.el' must be
loaded for these functions to work.

@file{planner-delicious.el} contains functions to integrate with Planner
in Emacs. It requires Planner, which can be found at
@url{http://sacha.free.net.ph}. This is included primarily for testing
purposes. For instructions, please see the comments at the top of the
file.

@node Getting Started
@chapter Getting Started

First, you need to set up an account at del.icio.us, by visiting that site and
following the instructions there.

Second, load the delicious-el files. Either put them in a directory that is
already in your load-path (M-x describe-variable <ret> load-path <ret> to see
what that is) or evaluate:

  (add-to-list 'load-path "/path/to/delicious-el/files")

Then, you need to set a few required options. You can do this either through
Customize, with:

  M-x customize-group <ret> delicious <ret>

or by evaluating something like the following:

  (setq delicious-api-user "myusername"
        delicious-api-password "mypassword"
        delicious-api-from "my@email.net")

If you decide you want to have the delicious-el functions available to you
automatically when you start Emacs, add:

  (require 'delicious)

to your `.emacs' file, making sure that both `delicious.el' and `delicioapi.el'
are somewhere in your load path. You will also need to either add the above
option definitions to the file, or save your changes via Customization.

There are some other options as well, but these three have to be set for the
program to work. You should use your e-mail address in `delicious-api-from',
because it is a polite thing to do. That way if your programs ever start doing
anything bonkers, del.icio.us will be able to contact you and let you know of
the problem.

Speaking of programs and bonkers, del.icio.us has requested that you limit your
hits to the API to a reasonable amount. In particular, it is requested that you
do not do anything that will trigger one hit to del.icio.us for every hit to
your web site. In order to respect that, this program does a number of things
(and will do more in the future) to cache information locally.

* Interactive commands to use and what to expect

- M-x delicious-post

This is the command to post a URL to your del.icio.us account. The first time
you execute this command in an Emacs session, delicious-el will fetch from the
server the list of tags you've used so far, and a complete list of all your
posts to date. You will then be prompted for information for the new post. The
only required information is the URL itself and a description. Everything else
is optional.

delicious-el will try to guess the URL that you want to enter. If you are in a
w3m-el buffer, it will suggest the URL of the site you are looking at. If not,
if there is a URL under the cursor, it will suggest that.  If neither of these
two things are true, it will scan the current buffer for a URL. It will suggest
the first one that it finds. Next, it will check the clipboard and see if there
is a URL there. If it doesn't find one, it will just put an "http://" in the
input line for you.

URL is a required field. If you try to enter a blank URL, the program will
abort.

When prompted for tags, enter one at a time, hitting enter after each. You have
tab-completion available in typical Emacs style, based on all of the tags you
have used in the past. When you are done entering tags, just hit enter at the
prompt. delicious-el will suggest possible tags above the prompt. Suggestions
currently are just a list of words that appear both in your current buffer and
in your tags list.

delicious-el will attempt to guess an appropriate description. If you
are in a w3m-el buffer, delicious-el will suggest the title of the page being
viewed as a description. If you are looking at an article in gnus, it will
suggest the title of the article as a description. If you like the suggestion,
hit enter. If you don't, just erase it and type your own.

The server requires some kind of description be entered. If you don't enter
one, the program will abort.

Extended Description is the next field, and it's all up to you. No guessing
attempts are made here.

Next is the Date/Time prompt. It's not pretty, and will be improved in the
future. If you don't enter anything here, the current date will be used. If you
do want to enter the date, the format is indicated in the prompt.

Once you enter the Date/Time and hit enter, the URL should be posted to the
server!

- M-x delicious-rename-tag

This will prompt you for an old tag and one or more new tags. As usual, you can
use tab completion when entering this information. In fact, the old tag you
enter must match an existing tag. The old tag will be changed to the new tags
for all posts that had the old tag. After the renaming is done, the local tag
list will be refreshed from the server.

- M-x delicious-build-posts-list

This command will refresh the local list of your posts from the server. You
shouldn't use this often. The reason posts are cached locally is to avoid
bothering the server too much. There isn't much reason to use this command,
because any posts made during your current session are recorded locally. But if
you suspect that something has gone wrong, you can use this command to refresh
from the server. Or, if you add posts from an external interface like your
non-emacs web browser, it would be useful to refresh the local list.

- M-x delicious-build-tags-list

This command will refresh the local list of the tags you have used from the
server. You shouldn't use this often, because the reason tags are cached
locally is to avoid bothering the server too much. Any new tags you use while
posting with delicious-post are added to the completion list, so the only
reason to refresh the list is if something funny happens and the list gets
corrupted, or if you add tags using another interface.

- M-x delicious-save-posts

This command will save whatever posts are currently cached (if everything is
working properly, this is all of your posts) to a file in your home
directory. This file is called `.delicious' by default, but you can change the
name by altering the value of `delicious-posts-file-name'. Currently, this
function does not make a backup copy before saving or warn you that there is
already a file there. It just clobbers. I'll make it a little safer in the
future, but since presumably you have all of your posts stored on the
del.icio.us server, I don't foresee any real disasters. This command gives you
a reasonable way to back up your del.icio.us posts. You can't recover them yet,
but I will soon have the function written to create posts from a file like this
one, and then you will be able to recover them.

- M-x delicious-load-posts

This command will load your posts from the file named by
`delicious-posts-file-name' into the variable `delicious-posts-list'.

* Interactive search commands

Although some filtering can be done via the API, I have started implementing
some search features that operate on the local copy of your posts list. This
enables us to have much more powerful searching, means you aren't dependent on
your internet connection to be able to search your posts (assuming you have a
local copy of them stored, which can be done in memory now and in a file
shortly), and minimizes load on the del.icio.us server.

All of the search commands will display their results in a "*delicious search
results*" buffer, which is displayed in Emacs's View mode and Delicious Search
mode. The default is for this buffer to open in a window other than the active
one, or for a second window to be created if none is available. Being in View
mode, the buffer is read-only and has many nice shortcuts for speedy
navigation. Delicious Search mode will also add some useful shortcuts in the
future---for now, it just binds <TAB> to skip to the next URL, looping back to
the beginning of the buffer if there are no more URLs.

Results are currently unsorted. At least, no intentional sorting is
applied. That will change in the future.

The basic search command is:

- M-x delicious-search-posts-regexp

This command will prompt you for a regular expression, search all the fields in
all of your posts for matches, and display the matches.

More targeted searching can be achieved by:

- M-x delicious-search-description-regexp

This command will prompt you for a regular expression, search only the
description field of your posts for matches, and display them.

- M-x delicious-search-href-regexp

This command will prompt you for a regular expression, search only the
href/link field of your posts, and display the matches.

- M-x delicious-search-tags-regexp

This command will prompt you for a regular expression, search only the tag
field of your posts, and display the matches. When searching, it may be useful
to remember that multiple tags are separated by whitespace.

Since tags are the means for organizing links in del.icio.us, we have a special
search function just for them:

- M-x delicious-search-tags

This command will prompt you for tags, one at a time. You can enter as many as
you like, and you can use <TAB>, <SPC>, or '?' to use Emacs minibuffer
completion based on your previously used tags. Just hit enter at the prompt
when you are done. A search will be done for all of the posts that have all of
those tags. The results will be displayed the same as the other search
commands. It is possible to use regular expression syntax within each tag, as
that is the way the match is determined internally, but you may run into
problems with some of the regexp characters and the completion commands. The
order of the tags is not considered important when determining matches. You do
not need to account for whitespace between tags with this method.

* Useful noninteractive functions

Noninteractive functions can't be called directly with M-x in Emacs. You can
call them in a variety of ways, including M-: (function-here), or by typing
(function-here) in the *scratch* buffer, moving to after the closing
parenthesis, and typing C-x C-e. Or you can call them from within your own
Emacs Lisp programs.

- (delicious-api-html)

This is a noninteractive function you can use to fetch an HTML feed of posts
from del.icio.us according to a long list of arguments. It's very rough at the
moment, but it seems to work. An interactive frontend is forthcoming. Note that
if you do not give it a user name to fetch posts from, it will default to using
your `delicious-api-user' name.

You can use this function, for example, to track the recent posts from users
whose interests you think overlap with yours, or you can use it to include your
own most recent delicious postings in your blog, especially if you blog using
emacs-wiki.el.

You can read the documentation on the server for the HTML feed parameters at
<http://del.icio.us/doc/html>.

You can set defaults for all of the parameters in the delicious customize
group, or by setting any of the variables in the following list. When you call
(delicious-api-html), you have to have the many arguments in order. If you want
to use your default for one of the arguments, just put `nil' in the function
call in the spot for that argument. That will cause your default to be used. If
you have a value other than nil for an argument in the function call, that
value will be used rather than the default. So, if you want to call
(delicious-api-html) to get the 20 most recent links from johnsu01's
del.icio.us account, but your default is set at 15, you would do this:

(delicious-api-html "johnsu01" nil 20)

If you usually want an RSS button to be included with your list, and you have
your default set accordingly, but want in this case not to have the RSS button,
you would do:

(delicious-api-html "johnsu01" nil 20 nil nil nil nil nil nil nil nil "no")

Note that both of these examples specify `nil' for the TAGNAME argument. This
means that the most recent posts, regardless of tag, will be
returned. Specifying a TAGNAME will return only posts with that tag.

Here is the list of parameters and a very brief description of each.

+ delicious-api-html-count
  The number of times to show by default when fetching an HTML del.icio.us feed. The server default is 15.

+ delicious-api-html-extended
  Either 'title' or 'body'. The server default is `title'. This means that the
  extended description will just be displayed in the link's title attribute. If
  you want the extended description to be displayed on its own, use `body'.

+ delicious-api-html-divclass
  Class to use for div. The server default is `delPost'.

+ delicious-api-html-aclass
  Class to use for a link. The server default is `delLink'.

+ delicious-api-html-tags
  Show tags or not. Server default is to show tags. Set this to true if you do NOT want tags.

+ delicious-api-html-tagclass
  Class to use for tags. Server default is `delTag'.

+ delicious-api-html-tagsep
  String to use for separator. Server default is `delTagSep'.

+ delicious-api-html-tagsepclass
  Class to use for separator. Server default is `delTagSep'.

+ delicious-api-html-bullet
  HTML entity to use for bullet. Set it to empty for no bullet. Server default is `raquo'.

+ delicious-api-html-rssbutton
  Add an RSS feed button using CSS. Server default is to show a button with `yes'.

+ delicious-api-html-extendeddiv
  This is whether to put the extended description for the entry in its own
  <div>. The server default is `no'.

+ delicious-api-html-extendedclass
  This the class to use for the extendeddiv. The server default is empty.

* Advanced use

- Binding commands to keys

The author uses this in his `.emacs' to bind `delicious-post' to <C-c p>.

(global-set-key "\C-cp" 'delicious-post)

* Integration with other Emacs modes

- w3m

Integration with w3m is one of the things that I'm working on right
now. So far, I've implemented these features:

-- URL and description guessing. The program will use the current page in the
   w3m buffer if you are using w3m as a suggestion for the link to post. It
   will use the current page name as a suggestion for the description of the
   link.

-- delicious-w3m-html. This is an interactive command to visit the HTML feed of
   a user's del.icio.us feed. If you call it with a prefix argument (C-u M-x
   delicious-w3m-html), the feed will be displayed in a new session. The
   default parameters are the same as the ones you set to use
   `delicious-api-html'. You can configure them in the `delicious' customize
   group, or individually (they all have the name delicious-api-html-*). After
   issuing the command, you will be prompted for the username, number of posts,
   and tag to filter by. Hitting return at these prompts will cause the
   defaults to be used. The defaults are indicated in the prompts. After
   collecting the information, w3m will then visit a page constructed according
   to your parameters in a w3m buffer.

-- delicious-w3m-bookmark-recent. This is the beginning of a larger effort at
   integrating delicious with w3m bookmarks. It is an interactive command that
   will add your delicious posts to your w3m bookmarks file. It operates based
   on recent posts. You tell it how many posts to scan, what tag (or tag
   intersection like "foo+bar" to filter by, and what w3m bookmark section to
   put the posts in. It will deposit the matching posts in that section,
   without checking for duplicates or making any effort at synching (yet). Note
   that you need to have the `w3m-bookmarks.el' library loaded to use this feature.

-- delicious-w3m-export. This is an interactive command that will export a w3m
   bookmark section to del.icio.us. It's very primitive and not 100% reliable
   at the moment. You can export one section at a time. When prompted for the
   section name, <tab> will complete based on your existing sections. You can
   then enter tags just like you do when you post. These tags will all be
   assigned to each entry in the w3m section. You must enter at least one
   tag. After that, you can enter an optional extended description and time
   parameter, which will be attached to all of the posts from this section. I
   say it's not 100% reliable because a few times I've had some posts not show
   up, and I haven't figured out why yet. Also, this command may not behave if
   your `w3m-bookmark-section-format' is not something close to
   "<h2>%s</h2>\n<ul>\n<li><a href=\"%s\">%s</a>\n<!--End of section (do not
   delete this comment)-->\n</ul>\n". It _should_ work as long as the section
   titles are enclosed in "<h2></h2>", each bookmark begins with <li>, and each
   bookmark only occupies one line. Future versions may be more flexible in
   this regard and will do verification of your posts. You need to have the
   `w3m-bookmarks.el' library loaded to use this feature.

* Problems

- HTTP errors

Currently, it is not uncommon for the del.icio.us server to be temporarily
unavailable. I'm working on better HTTP error-handling, so that the specific
error will be reported to you. There's some code here to do that now, but it
does not seem to be working well. The best solution to this currently is to
open <http://del.icio.us> in your browser and see what error is coming up.

- Server timeouts

I implemented a timeout because I figured you probably didn't want your whole
Emacs session to be unusable for too long while waiting for an OK response from
the server. Depending on the speed of your connection and of the del.icio.us
server, you might want to use a higher number for `delicious-api-timeout'. The
default is 60 seconds. Note that when a connection times out, there is a good
chance that your transaction with del.icio.us still happened; delicious-el just
got tired of waiting. So you probably want to check with your browser and see
if that last post was actually received before you send it again.

* Keeping Up

Updated versions can be had via darcs at
<http://www.wjsullivan.net/darcs/delicious-el>. You can also download the
archive, generally just as current, at
<http://www.wjsullivan.net/darcs/delicious-el/delicious-el.tar.gz>.

I tend to post ChangeLog entries at <http://www.wjsullivan.net/news>.

* Bugs

Please report any bugs or suggestions to me at <john@wjsullivan.net>. If enough
people are interested, perhaps we will open an area at
<http://www.emacswiki.org>.
